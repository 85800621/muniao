<?xml version="1.0" encoding="UTF-8"?>    
    <beans 
     xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!--################################  Spring部分  ################################-->

     <!-- 扫描包下面的所有的类是否受spring的管理，需要spring创建对象 -->
    <context:component-scan base-package="com.muniao">
    <!-- 不包含@Controller注解和@ControllerAdvice注解（配置全局异常处理的）
    	（因为spring-mvc里面已经扫描并管理了，所以为了避免重复管理，应该排除） -->
    	<context:exclude-filter type="annotation" 
            expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" 
            expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!--################################  MySQL部分  ################################-->
    
    <!-- 配置config.properties的文件路径 -->
	<context:property-placeholder location="classpath:config.properties" />
    
    <!-- 配置数据库和连接池信息，使用config.properties里面的值 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
         <!-- 数据连接信息 -->  
         <property name="jdbcUrl" value="${jdbc.url}"></property>  
         <property name="driverClass" value="${jdbc.driverClassName}"></property>  
         <property name="user" value="${jdbc.username}"></property>  
         <property name="password" value="${jdbc.password}"></property>  

         <!-- 初始化时获取三个连接（取值应在minPoolSize与maxPoolSize之间。默认值: 3） -->  
         <property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>  
         <!-- 连接池中保留的最小连接数，默认值：3 -->  
         <property name="minPoolSize" value="${jdbc.minPoolSize}"></property>  
         <!-- 连接池中保留的最大连接数，默认值：15 -->  
         <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>  
         <!-- 当连接池中的连接数耗尽的时候，c3p0一次同时获取的连接数，默认值：3 -->  
         <property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>  
         <!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->  
         <property name="maxStatements" value="${jdbc.maxStatements}"></property>  
         <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->  
         <property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"></property>  
         <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
         <property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>  
    </bean>

    <!--################################  MyBATis部分  ################################-->

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.muniao.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

    <!--################################  事务部分  ################################-->

	<!-- 声明式事务配置 -->

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<tx:annotation-driven></tx:annotation-driven>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.user.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <bean name="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--指定登录界面-->
        <property name="loginUrl" value="/register.ftl"/>

        <property name="filterChainDefinitions">
            <value>
                <!--anon不需要登录-->
                /login/checkLogin=anon
                /Regist/RegistSubmit=anon
                /css/**=anon
                /dist/**=anon
                /images/**=anon
                /js/**=anon
                /vendor/**=anon
                <!--authc需要登录才能访问-->
                <!--user配合rememberMe使用有效，authc不能配合rememberMe使用-->
                /**=user
            </value>
        </property>

    </bean>

    <bean name="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--  <property name="realms" ref="UserRealmByPhone"/>
          <property name="realm" ref="UserRealmByEmail"/>  -->
        <property name="realms">
            <list>
                <ref bean="UserRealmByEmail"/>
                <ref bean="UserRealmByPhone"/>
            </list>
        </property>
    </bean>

    <bean id="UserRealmByPhone" class="com.muniao.Realm.UserRealmByPhone"/>

    <bean id="UserRealmByEmail" class="com.muniao.Realm.UserRealmByEmail"/>


    <!--################################  备注备用  ################################-->

    <!-- 配置通知（配置事务执行的方法定义的名称规则） -->
	<!--<tx:advice id="myAdvice" transaction-manager="transactionManager">-->
	<!--<tx:attributes>-->
	<!--<tx:method name="save*" propagation="REQUIRED"/>-->
	<!--<tx:method name="del*" propagation="REQUIRED" />-->
	<!--<tx:method name="update*" propagation="REQUIRED" />-->
	<!--<tx:method name="*" propagation="SUPPORTS" read-only="true" />-->
	<!--</tx:attributes>-->
	<!--</tx:advice>-->

	<!-- 配置AOP的规则 -->
	<!--<aop:config>-->
	<!--&lt;!&ndash; 配置切入点 &ndash;&gt;-->
	<!--<aop:pointcut id="pc" expression="execution(* com.qianfeng.blog.service.impl.*.*(..))" />-->
	<!--<aop:advisor pointcut-ref="pc" advice-ref="myAdvice" />-->
	<!--</aop:config>-->

</beans>